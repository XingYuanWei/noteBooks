vnote_backup_file_826537664 F:/VNote/Algorithm/2.Add Two Numbers.md
# 2.Add Two Numbers


## 题目

> You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
> 
> You may assume the two numbers do not contain any leading zero, except the number 0 itself.
> 
> Example:
> 
> Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
> Output: 7 -> 0 -> 8
> Explanation: 342 + 465 = 807.

## 题目翻译
> 给定两个非空Linked List表示两个非负整数，每个数字以倒置的方式单独的存储在每个节点中。让两个数字相加使其返回一个新的Linked List。

## 思路
就像在纸张上列竖式计算一样，从最后一个数字开始加起，然后如果超过了10，则保留下取余10后数，然后进位为1，待到下一位两个数字相加的时候，
然后加上这个进位，之后的数字也以此类推。342 + 465 = 807。把这个过程可以用下图进行表示。

![两个数相加的过程表示图](_v_images/20190123225015685_30839.png)
>例如5+7=12，这样的情况下，我们赋值当前的数值为2，让进位carry=1，进位carry要么为1，要么为0，因为单个数相加即使加上进位1
>也不过是9+9+1=19，也不会超过20，这样的话要么进位为1，要么进位为0。

## 解决问题流程大概如下
## 1. 创建一个节点为要返回的数值，作为他的头结点，可以取名head，另设头指针curr指向头结点
## 2. 初始化进位carry为0
## 3. 构建p和q两个指针指向链表1和链表2
## 4. 循环迭代两个链表的节点直到链表的末节点
####     ① 创建变量x并把它赋值为指针p所指向结点的值，如果此时该p指针指向了最后一个节点，则赋值为0
####     ② 创建变量y并把它赋值为指针q所指向结点的值，如果此时该q指针指向了最后一个节点，则赋值为0
####     ③ 创建变量sum值为x+y+carry
####     ④ 更新变量carry = sum / 10
####     ⑤ 创建一个新节点，其值为sum mod 10，使得curr的next指向该新节点
####     ⑥ 让p和q指向下一个节点
## 5. 检查如果carry为1，则再创建一个新节点为1并添加到结果链表的最后
## 6. 返回head节点的next指针



## Java代码如下
```java
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode p = l1, q = l2, curr = dummyHead;
        int carry = 0;
        while (p != null || q != null) {
            int x = (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (p != null) p = p.next;
            if (q != null) q = q.next;
        }
        if (carry > 0) {
            curr.next = new ListNode(carry);
        }
        return dummyHead.next;
    }
```

## c++完整代码如下
```c++
    #include<cstdlib>
    #include<iostream>
    #include<cstdio>

      //Definition for singly-linked list.
      struct ListNode {
         int val;
          ListNode *next;
    	  //初始化支持ListNode(int x)这种方式，即把x赋给val，next赋值给NULL
          ListNode(int x) : val(x), next(NULL) {}
     };

    class Solution {
    public:
    	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    		struct ListNode *n1 = l1, *n2 = l2, *pre_sum = NULL;
    		//返回的头结点
    		struct ListNode *units_digit_sum = NULL;
    		int value, carry = 0;
    		while (n1 != NULL || n2 != NULL || carry != 0) {
    			value = 0;
    			//n1不为NULL
    			if (n1 != NULL) {
    				//使value值为n1的value
    				value += n1->val;
    				//使n1指针指向链表的下一个节点
    				n1 = n1->next;
    			}
    			if (n2 != NULL) {
    				//使得value值为n2的value
    				value += n2->val;
    				//使n2指针指向链表的下一个节点
    				n2 = n2->next;
    			}
    			//使value加上进位的值
    			value += carry;
    			//进位值为value整除于10
    			carry = value / 10;
    			//value为value对10取模
    			value %= 10;
    			//分配一个新节点的内存
    			struct ListNode *cur_sum = (struct ListNode *)malloc(sizeof(struct ListNode));
    			cur_sum->val = value;
    			cur_sum->next = NULL;

    			//如果该头结点为NULL(这整个if语句为了使得units_digit_sum指针一直指向头结点)
    			if (units_digit_sum == NULL)
    				units_digit_sum = cur_sum;
    			else
    				pre_sum->next = cur_sum;

    			//让pre_sum指针指向当前节点(该pre_sum指针随着迭代指向最后一个节点)
    			pre_sum = cur_sum;
    		}
    		return units_digit_sum;
    	}

    	//add a ListNode in head of the Linked list
    	void push(struct ListNode** head_ref, int data) {
    		struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
    		new_node->next = *head_ref;
    		new_node->val = data;
    		*head_ref = new_node;
    	}

    	//print value of the Linked list
    	void printList(struct ListNode* list) {
    		while (list != NULL)
    		{
    			printf("%d->", list->val);
    			list = list->next;
    		}
    	}
    };

    int main() {
    	Solution solution;
    	struct ListNode* l1;
    	solution.push(&l1, 2);
    	solution.push(&l1, 4);
    	solution.push(&l1, 3);
    	printf("the first Linked list:");
    	solution.printList(l1);
    	struct ListNode* l2;
    	solution.push(&l2, 5); 
    	solution.push(&l2, 6);
    	solution.push(&l2, 4);
    	printf("\n");
    	printf("the second Linked list:");
    	solution.printList(l2);
    	struct ListNode* result = solution.addTwoNumbers(l1, l2);
    	printf("\n");
    	printf("the result is:");
    	solution.printList(result);
    	return 0;
    }
```


## 解决问题的过程图解

### 1. 进入方法
![进入addTwoNumbers方法的两个Linked List](_v_images/20190126154337757_28273.png)

### 2. 创建指针
![创建指针后指向情况](_v_images/20190126162230495_22501.png)


### 3. 执行循环的语句
![执行x+y+carry得到value的值，再除以的0得到进位](_v_images/20190126175044481_5247.png)
>注意上图是有错误的，节点7后没有那些节点，因为还没有被创建不应该画出来。

#### ① 第一次执行到循环体内的最后一条语句
![执行了units_digit_sum = cur_sum和pre_sum = cur_sum](_v_images/20190126200512492_14685.png)
#### ② 第二次执行循环
![第二次循环](_v_images/20190126214651558_31604.png)
>当进入第二执行循环时，程序开始执行
```c++
  //使value加上进位的值
	value += carry;
	//进位值为value整除于10
	carry = value / 10;
	//value为value对10取模
	value %= 10;
```
>然后分配一个新的节点的内存，其节点值为0，使得cur_sum指针指向新创建的节点，这时判断units_digit_sum
>是否为空，不为空则执行pre_sum->next = cur_sum,使得原先pre_sum所指向的节点的next指针指向了新创建的节点。
>最后执行pre_sum = cur_sum，使得pre_sum指针指向了cur_sum所指向的节点。此时示意图如下：  

![第二次循环执行完成时内存中指针指向情况](_v_images/20190126214827728_29010.png)

#### ③第三次循环以此类推
>此时内存中指针指向情况如下：
>
>![完成循环](_v_images/20190126221139711_3795.png)

### 4. 返回units_digit_sum指针


## 程序运行结果
![程序运行结果](_v_images/20190126221430162_14899.png)